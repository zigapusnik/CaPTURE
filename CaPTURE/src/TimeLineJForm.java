/*
 * Copyright iGEM Slovenia 2016, National Institute of Chemistry Slovenia 
 * We would like to distribute the best version available to all the users of the program, without exception.
 * Therefore, all types of users are kindly requested to contact mojca.bencina@ki.si to establish a network of users, 
 * so each one can profit out of collaboration and distribution of the currently best version.
 * If you introduce any change the original code (if you modify the original code or the other version officially available) 
 * and make it more useful by it, please notify the original author on ziga.pusnik@gmail.com 
 * so all the users of the programs can be notified of the improvement. Your contributions will be highly appreciated.
 * Having used CaPTURE (or any derived version of it) or its source code for obtaining results, 
 * you become obliged to give credit to the original authors.
 *
 * This file is part of software CaPTURE and is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package scanPackage;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TimeLineJForm extends javax.swing.JFrame {

    private GraphData data;
    private CaPTURE parent; 

    /**
     * Getter for GraphData data.
     * @return data
     */
    public GraphData getData() {
        return data;
    }

    /**
     * Setter for GraphData data.
     * @param data the GraphData object
     */
    public void setData(GraphData data) {
        this.data = data;
    }

    public void setParent(CaPTURE parent) {
        this.parent = parent;
    }

    
    
    /**
     * Creates new form TimeLineJForm
     */
    public TimeLineJForm() {
        initComponents();
        data = new GraphData();
    }

    /**
     * Gets BufferedImage icon
     * @return icon image
     */
    private Image getIcon() {
        try {
            return ImageIO.read(CaPTURE.class.getResourceAsStream("icon.png"));
        } catch (IOException ex) {
            return null;
        }
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGraph = new javax.swing.JPanel(){
            @Override
            public void paintComponent(Graphics g1) {
                super.paintComponent(g1);
                Graphics2D g = (Graphics2D)g1;
                int width = this.getSize().width;
                int height = this.getSize().height;
                int marginLeft = (int)(width*0.04);
                int marginBottom = marginLeft;
                marginLeft = marginLeft*2;
                try{

                    AffineTransform orig = g.getTransform();
                    //draw string
                    g.rotate(-Math.PI/2);
                    g.setFont(new Font("Arial Narrow", Font.PLAIN, (int)(marginLeft*0.25)));
                    g.drawString("Intensity #1", -(int)((height - marginBottom)/3.0 - ((height - marginBottom)/8)),  (int)(marginBottom - marginBottom*0.2));
                    g.drawString("Intensity #2", -(int)(2*(height - marginBottom)/3.0 - ((height - marginBottom)/8)), (int)(marginBottom - marginBottom*0.2));
                    g.drawString("Intensity ratio", -(int)(3*(height - marginBottom)/3.0 - ((height - marginBottom)/8.5)), (int)(marginBottom - marginBottom*0.2));
                    g.setTransform(orig);
                    g.drawString("Time [s]", (int)(marginBottom*0.20), height - (int)(marginBottom/2.0) + (int)(marginBottom*0.25));
                    int regSize = data.drawingData.getRegions().get(0).getTimepntsG().size();
                    //draw axes in black
                    g.setColor(Color.black);
                    g.drawLine(marginLeft, (int)((height - marginBottom)/3.0), width, (int)((height - marginBottom)/3.0));
                    g.drawLine(marginLeft, (int)(2*(height - marginBottom)/3.0), width, (int)(2*(height - marginBottom)/3.0));
                    g.drawLine(marginLeft, (int)(3*(height - marginBottom)/3.0), width, (int)(3*(height - marginBottom)/3.0));

                    g.drawLine(marginLeft, height - marginBottom, marginLeft, 0);

                    //on first 50 pixels draw scale
                    double dx = ((double)width - marginLeft)/(regSize - 1);
                    double startX = marginLeft;
                    //draw units
                    g.setColor(Color.black);
                    g.setFont(new Font("Arial Narrow", Font.PLAIN, (int)(marginBottom*0.5)));
                    ArrayList<Double> tmpnts = data.getTimePoints();
                    for(int k = 1; k < regSize; k++) {
                        //draw units
                        if((k-1)%10 == 0) {
                            double time = tmpnts.get(k);
                            g.drawString(String.format(Locale.US, "%.0f", time), (int)startX - (int)(marginBottom*0.20), height - (int)(marginBottom/2.0) + (int)(marginBottom*0.25));
                        }
                        //draw horizontal line
                        g.drawLine((int)startX, height - marginBottom + (int)(marginBottom*0.1), (int)startX, height - marginBottom - (int)(marginBottom*0.1));
                        startX  = startX + dx;
                    }

                    double maxG = 0;
                    double maxY = 0;
                    double maxRatio = 0;
                    for(Region reg: data.drawingData.getRegions()) {
                        //find max
                        double tempMax = Collections.max(reg.getTimepntsG());
                        if(tempMax > maxG) {
                            maxG = tempMax;
                        }
                        tempMax = Collections.max(reg.getTimepntsY());
                        if(tempMax > maxY) {
                            maxY = tempMax;
                        }
                        tempMax = Collections.max(reg.getTimepntsRa());
                        if(tempMax > maxRatio) {
                            maxRatio = tempMax;
                        }
                    }
                    double dyG = ((height - marginBottom)/3.0)/maxG;
                    double dyY = ((height - marginBottom)/3.0)/maxY;
                    double dyRa = ((height - marginBottom)/3.0)/maxRatio;

                    //dispaly units
                    double yVal = 0;
                    double yPos = (height - marginBottom)/3.0;
                    for(int i = 0; i < 10; i++) {
                        if(i%2 == 0) {
                            yVal = (i/10.0)*maxG;
                            g.drawString(Integer.toString((int)yVal), (int)(3*marginLeft/4.0) - (int)(marginBottom*0.25), (int)yPos + (int)(marginBottom*0.2));
                        }
                        g.drawLine(marginLeft - (int)(marginBottom*0.1), (int)yPos, marginLeft + (int)(marginBottom*0.1), (int)yPos);
                        yPos = yPos - ((height - marginBottom)/3.0)*0.1;
                    }
                    yVal = 0;
                    yPos = 2*(height - marginBottom)/3.0;
                    for(int i = 0; i < 10; i++) {
                        if(i%2 == 0) {
                            yVal = (i/10.0)*maxY;
                            g.drawString(Integer.toString((int)yVal), (int)(3*marginLeft/4.0) - (int)(marginBottom*0.25), (int)yPos + (int)(marginBottom*0.2));
                        }
                        g.drawLine(marginLeft - (int)(marginBottom*0.1), (int)yPos, marginLeft + (int)(marginBottom*0.1), (int)yPos);
                        yPos = yPos - ((height - marginBottom)/3.0)*0.1;
                    }
                    yVal = 0;
                    yPos = 3*(height - marginBottom)/3.0;
                    for(int i = 0; i < 10; i++) {
                        if(i%2 == 0) {
                            yVal = (i/10.0)*maxRatio;
                            g.drawString(String.format(Locale.US, "%.1f", yVal), (int)(3*marginLeft/4.0) - (int)(marginBottom*0.25), (int)yPos + (int)(marginBottom*0.2));
                        }
                        g.drawLine(marginLeft - (int)(marginBottom*0.1), (int)yPos, marginLeft + (int)(marginBottom*0.1), (int)yPos);
                        yPos = yPos - ((height - marginBottom)/3.0)*0.1;
                    }
                    for(Region reg: data.drawingData.getRegions()) {
                        paintCurve(reg, marginLeft, marginBottom, height, width, dyG, dyY, dyRa, regSize, dx, g, false, false, 1, reg.getTimepntsG().size());
                    }
                    g.setColor(Color.black);
                    if(data.flashyCurveId >= 0) {
                        paintCurve(data.drawingData.getRegions().get(data.flashyCurveId), marginLeft, marginBottom, height, width, dyG, dyY, dyRa, regSize, dx, g, true, false, 1, data.drawingData.getRegions().get(data.flashyCurveId).getTimepntsG().size());
                    }
                }
                catch(Exception e) {}
            };
        };
        jMenuBar = new javax.swing.JMenuBar() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setColor(new Color(51, 51, 51));
                g2d.fillRect(0, 0, getWidth(), getHeight());

            };
        };
        jMenuFile = new javax.swing.JMenu();
        jMenuExportAs = new javax.swing.JMenu();
        jMenuItemCSV = new javax.swing.JMenuItem();
        jMenuItemJPEG = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIcon());

        jPanelGraph.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelGraphLayout = new javax.swing.GroupLayout(jPanelGraph);
        jPanelGraph.setLayout(jPanelGraphLayout);
        jPanelGraphLayout.setHorizontalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        jPanelGraphLayout.setVerticalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jMenuBar.setBorder(null);

        jMenuFile.setBackground(new java.awt.Color(51, 51, 51));
        jMenuFile.setForeground(new java.awt.Color(255, 255, 255));
        jMenuFile.setText("File");
        jMenuFile.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuFile.setOpaque(true);

        jMenuExportAs.setBackground(new java.awt.Color(51, 51, 51));
        jMenuExportAs.setForeground(new java.awt.Color(255, 255, 255));
        jMenuExportAs.setText("Export as");
        jMenuExportAs.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuExportAs.setOpaque(true);

        jMenuItemCSV.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItemCSV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuItemCSV.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItemCSV.setText("CSV");
        jMenuItemCSV.setOpaque(true);
        jMenuItemCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCSVActionPerformed(evt);
            }
        });
        jMenuExportAs.add(jMenuItemCSV);

        jMenuItemJPEG.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItemJPEG.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuItemJPEG.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItemJPEG.setText("JPEG");
        jMenuItemJPEG.setOpaque(true);
        jMenuItemJPEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemJPEGActionPerformed(evt);
            }
        });
        jMenuExportAs.add(jMenuItemJPEG);

        jMenuFile.add(jMenuExportAs);

        jMenuBar.add(jMenuFile);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelGraph, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelGraph, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exports graph in CSV format.
     * @param fc the FileChooser object that opens in order to save file
     * @param panel the JPanel that is being exported 
     * @param parent 
     */
    public static void exportCSV(JFileChooser fc, ImageData drawingData, CaPTURE parent) {
        //export as csv
        fc.setDialogTitle("Select folder");
        //fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setSelectedFile(new File(parent.getFilename() + "_" + parent.getSeriesName() + "_" + "timeLineData" + "_" + parent.getTimeLineExportCSV()));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files (*.csv)", "*.csv");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(filter);
        
        int sf = fc.showSaveDialog(fc);
        if (sf == JFileChooser.APPROVE_OPTION) {
            try {
                parent.setTimeLineExportCSV(parent.getTimeLineExportCSV() + 1);
                File file = fc.getSelectedFile();
                String filename = file.getAbsolutePath();
                if(!filename.endsWith(".csv")) {
                    file = new File(filename + ".csv");
                }
                PrintWriter writer = new PrintWriter(file, "UTF-8");                
                writer.print("timepoint");                         
                for(int i = 0; i < drawingData.getRegions().size(); i++) {
                    writer.print(", x, y, width, 1st region intensity, 2nd region intensity, region ratio");   
                }
                writer.println();                
                int timePnts = drawingData.getRegions().get(0).getTimepntsG().size();
                for (int i = 0; i < timePnts; i++) {
                    writer.print(Integer.toString(i));
                    for(Region region: drawingData.getRegions()) {
                        writer.printf(", %d, %d, %d, %.2f, %.2f, %.2f", region.getX(), region.getY(), region.getWinSize(), region.getTimepntsG().get(i), region.getTimepntsY().get(i), region.getTimepntsRa().get(i));                    }
                    writer.println();
                }
                writer.close();            
            }
            catch(FileNotFoundException | UnsupportedEncodingException e) {
                parent.setTimeLineExportCSV(parent.getTimeLineExportCSV() - 1);
            }
        }    
    }
    
    /**
     * This method is invoked when jMenuItemCSV is clicked.
     * Exports this GraphData to CSV format.
     * @param evt 
     */
    private void jMenuItemCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCSVActionPerformed
        exportCSV(parent.fc, data.drawingData, parent);
    }//GEN-LAST:event_jMenuItemCSVActionPerformed
    
    /**
     * Creates new BufferedImage JPanel panel passed in parameters.
     * @param panel the jPanel to be exported to BufferedImage
     * @return new BufferedImage
     */
    public static BufferedImage createImage(JPanel panel) {
        int w = panel.getWidth();
        int h = panel.getHeight();
        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = bi.createGraphics();
        panel.paint(g);
        return bi;
    }
    
    /**
     * Exports graph in JPEG format.
     * @param fc the FileChooser object that opens in order to save file
     * @param panel the JPanel that is being exported 
     * @param parent 
     */
    public static void exportJPEG(JFileChooser fc, JPanel panel, CaPTURE parent) {
        //export as jpeg
        //JFileChooser fc = new JFileChooser();
        fc = new JFileChooser(fc.getCurrentDirectory());
        fc.setDialogTitle("Select folder");
        //fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setSelectedFile(new File(parent.getFilename() + "_" + parent.getSeriesName() + "_" + "timeLineGraph" + "_" + parent.getTimeLineExportJPEG()));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPEG files (*.jpg)", "*.jpg");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(filter);
        
        int sf = fc.showSaveDialog(fc);
        if (sf == JFileChooser.APPROVE_OPTION) {
            try {
                parent.setTimeLineExportJPEG(parent.getTimeLineExportJPEG()+ 1);
                File file = fc.getSelectedFile();
                String filePath = file.getAbsolutePath();
                if(!filePath.endsWith(".jpg")) {
                    file = new File(filePath + ".jpg");
                }
                BufferedImage bi = createImage(panel);
                ImageIO.write(bi, "jpg", file); 
            }
            catch(Exception e){
                parent.setTimeLineExportJPEG(parent.getTimeLineExportJPEG() - 1);
            }
        }    
    }
    
    /**
     * This method is invoked when jMenuItemJPEG is clicked.
     * Exports jPanelGraph to .jpg image.
     * @param evt 
     */
    private void jMenuItemJPEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemJPEGActionPerformed
        exportJPEG(parent.fc, jPanelGraph, parent);
    }//GEN-LAST:event_jMenuItemJPEGActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the default os look and feel if exception set Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());   
        }
        catch(Exception e) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        //break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(CaPTURE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(CaPTURE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(CaPTURE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(CaPTURE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }        
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TimeLineJForm().setVisible(true);
            }
        });
    }
    public class GraphData{
        
        private ImageData drawingData;
        private int flashyCurveId;
        private ArrayList<Double> timePnts;
        
        /**
         * Creates new GraphData with ImageData drawingData parameter and flashyCurveId set to -1.
         * @param drawingData 
         */
        GraphData(ImageData drawingData) {
            //counstrucotr for panel2
            this.drawingData = drawingData;
            flashyCurveId = -1; //at beggining there are no flashy curves
        }

        /**
         * Creates new GraphData with flashyCurveId set to -1.
         */
        GraphData() {
            flashyCurveId = -1;
        }

        /**
         * Getter for ImageData drawingData.
         * @return drawingData
         */
        public ImageData getDrawingData() {
            return drawingData;
        }

        /**
         * Getter for time points
         * @return timePnts
         */
        public ArrayList<Double> getTimePoints() {
            return timePnts;
        }
        
        /**
         * Getter for flashyCurveId.
         * @return flashyCurveId
         */
        public int getFlashyCurveId() {
            return flashyCurveId;
        }

        /**
         * Setter for ImageData drawingData.
         * @param drawingData the ImageData object
         */
        public void setDrawingData(ImageData drawingData, ArrayList<Double> timePnts) {
            this.drawingData = drawingData;
            this.timePnts = timePnts;
        }

        /**
         * Setter for flashyCurveId.
         * @param flashyCurveId the id of flashy curve
         */
        public void setFlashyCurveId(int flashyCurveId) {
            this.flashyCurveId = flashyCurveId;
        }    
    }
    
    /**
     * Paints region time line curve on jPanelGraph.
     * @param reg the region data to be painted
     * @param marginLeft the left margin
     * @param marginBottom the bottom margin
     * @param height the height of jPanelGraph
     * @param width the width jPanelGraph
     * @param dyG the size of 1 unit for 1st channel data in pixels
     * @param dyY the size of 1 unit for 2nd channel data in pixels
     * @param dyRa the size of 1 unit for ratio data in pixels
     * @param regSize the number of time points
     * @param dx the length of steps from one time point to next in pixels
     * @param f the Graphics object
     * @param black whether or not curve should be painted black
     */
    public static void paintCurve(Region reg, double marginLeft, double marginBottom, int height, int width, double dyG, double dyY, double dyRa, int regSize, double dx, Graphics f, boolean black, boolean bold, int start, int end) {
        double startX = marginLeft;
        Graphics2D g = (Graphics2D)f;
        
        //set draawing quality
        RenderingHints rh = new RenderingHints(
        RenderingHints.KEY_ANTIALIASING,
        RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHints(rh);
        g.setStroke(new BasicStroke(1));
        if(bold) {
            g.setStroke(new BasicStroke(3));
        }
        if(black) {
            g.setStroke(new BasicStroke(3)); //width of black curve should be 4 pixels
            g.setColor(Color.black);
        }
 
        if(!black) {
            g.setColor(Color.green);
        }
        for(int k = start; k < end; k++) {
           double prev = (height - marginBottom)/3.0 - reg.getTimepntsG().get(k - 1)*dyG ;
           double curr = (height - marginBottom)/3.0 - reg.getTimepntsG().get(k)*dyG;
           g.drawLine((int)startX, (int)prev, (int)(startX + dx), (int)curr);
           startX += dx;
        }
        startX = marginLeft;
        if(!black) {
            g.setColor(Color.red);
        }
        for(int k = start; k < end; k++) {
           double prev = 2*(height - marginBottom)/3.0 - reg.getTimepntsY().get(k - 1)*dyY ;
           double curr = 2*(height - marginBottom)/3.0 - reg.getTimepntsY().get(k)*dyY;
           g.drawLine((int)startX, (int)prev, (int)(startX + dx), (int)curr);
           startX += dx;
        }
        startX = marginLeft;
        if(!black) {
            g.setColor(Color.blue);        
        }
        for(int k = start; k < end; k++) {
           double prev = 3*(height - marginBottom)/3.0 - reg.getTimepntsRa().get(k - 1)*dyRa ;
           double curr = 3*(height - marginBottom)/3.0 - reg.getTimepntsRa().get(k)*dyRa;
           g.drawLine((int)startX, (int)prev, (int)(startX + dx), (int)curr);
           startX += dx;
        }   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuExportAs;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemCSV;
    private javax.swing.JMenuItem jMenuItemJPEG;
    private javax.swing.JPanel jPanelGraph;
    // End of variables declaration//GEN-END:variables
}
